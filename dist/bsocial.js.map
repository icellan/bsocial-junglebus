{"version":3,"file":"bsocial.js","names":["FIRST_BSOCIAL_BLOCK","BSOCIAL_VALID_ACTIONS","updateLastBlock","block","updateStatusValue","getLastBlockIndex","lastBlockIndex","getStatusValue","addErrorTransaction","op","_id","Errors","updateOne","txId","$set","upsert","bapDB","getBAPIdByAddress","address","timestamp","bapApiUrl","match","getDB","bap","collection","findOne","idKey","valid","result","fetch","method","headers","Accept","body","JSON","stringify","data","json","status","bitfsUrl","getBitfsContent","url","getUrl","replace","response","text","processBSocialTransaction","transaction","query","processed","AIP","i","length","bapId","bSocialReply","MAP","context","tx","twetchPost","app","twetchReply","reply","B","content","BITFS_STORE","bitfsContent","catch","e","console","error","BITFS_MAX_CONTENT_LENGTH","BSOCIAL_BITFS","Buffer","from","toString","twetchUrlRegex","twetchRepost","twetchTx","type","existing","BSOCIAL","bSocialId","reason","message","insert","parseBSocialTransaction","bmap","BMAP","querySchema","action","currency","apiEndpoint","handler","bmapQuerySchemaHandler","bind","addProtocolHandler","name","bSocialOp","cleanDocumentKeys","transformTx","h","in","out","lock","blk","forEach","key","Array","isArray","DEBUG","isBSocialOp","find","map","cmd","includes","processBlockEvents","blockHeight","blockTime","Math","round","Date","VERBOSE","log","Random","id","Object","getOwnPropertyNames","getEventFromTx","rawTx","BPU","parse","r","split","token","include","s","indexBSocialTransactions","subscriptionId","lastBlockIndexed","client","JungleBusClient","useSSL","onError","ctx","onPublish","event","block_height","block_time","onStatus","statusCode","ControlMessageStatusCode","BLOCK_DONE","ERROR","onMempool","Subscribe","err"],"sources":["../src/bsocial.js"],"sourcesContent":["import { JungleBusClient, ControlMessageStatusCode } from '@gorillapool/js-junglebus';\nimport BPU from 'bpu';\nimport BMAP from 'bmapjs';\nimport 'node-fetch';\nimport { bmapQuerySchemaHandler } from 'bmapjs/dist/utils';\n\nimport {\n  DEBUG,\n  VERBOSE,\n  bapApiUrl,\n  BITFS_STORE,\n  BITFS_MAX_CONTENT_LENGTH,\n} from './config';\nimport { BSOCIAL } from './schemas/bsocial';\nimport { Errors } from './schemas/errors';\nimport { getStatusValue, updateStatusValue } from './status';\nimport { cleanDocumentKeys } from './lib/utils';\nimport { getDB } from './lib/db';\nimport { BSOCIAL_BITFS } from './schemas/bsocial-bitfs';\nimport Random from './lib/random';\n\nexport const FIRST_BSOCIAL_BLOCK = 671145;\n\nexport const BSOCIAL_VALID_ACTIONS = [\n  'post',\n  'repost',\n  'like',\n  'follow',\n  'unfollow',\n  'attachment',\n  'tip',\n  'payment',\n  'comment',\n  'friend',\n  'message',\n];\n\nexport const updateLastBlock = async function (block) {\n  return updateStatusValue('lastBSocialBlock', '' + block);\n};\n\nexport const getLastBlockIndex = async function () {\n  const lastBlockIndex = await getStatusValue('lastBSocialBlock');\n  return lastBlockIndex ? Number(lastBlockIndex) : FIRST_BSOCIAL_BLOCK;\n};\n\nexport const addErrorTransaction = async function (op) {\n  delete op._id;\n  return Errors.updateOne({\n    _id: op.txId,\n  }, {\n    $set: op,\n  }, {\n    upsert: true,\n  });\n};\n\nlet bapDB;\nexport const getBAPIdByAddress = async function (address, block, timestamp) {\n  if (bapApiUrl) {\n    if (bapApiUrl.match(/^mongodb(\\+srv)?:\\/\\//)) {\n      // This uses the local mongodb, which should be up2date with a bap-planaria\n      if (!bapDB) {\n        bapDB = await getDB(bapApiUrl);\n      }\n      const bap = await bapDB.collection('id')\n        .findOne({\n          'addresses.address': address,\n        });\n      if (bap) {\n        // TODO check whether it is valid at block / timestamp\n        return {\n          idKey: bap._id,\n          valid: true,\n        };\n      }\n    } else {\n      const result = await fetch(`${bapApiUrl}/identity/validByAddress`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          address,\n          block,\n          timestamp,\n        }),\n      });\n      const data = await result.json();\n      if (data && data.status === 'OK' && data.result) {\n        return data.result;\n      }\n    }\n  }\n\n  return false;\n};\n\nexport const bitfsUrl = 'https://x.bitfs.network/';\nexport const getBitfsContent = async function (url) {\n  const getUrl = url.replace('bitfs://', bitfsUrl);\n  const response = await fetch(getUrl);\n  if (response && response.status === 200) {\n    return response.text();\n  }\n  return null;\n};\n\nexport const processBSocialTransaction = async function (transaction) {\n  if (!transaction) return;\n\n  const query = { _id: transaction.txId, ...transaction };\n  delete query.txId;\n  query.processed = false;\n\n  // get BAP IDs for given social op\n  if (query.AIP) {\n    for (let i = 0; i < query.AIP.length; i++) {\n      const { address } = query.AIP[i];\n      const bap = await getBAPIdByAddress(address, transaction.block, transaction.timestamp);\n      if (bap && bap.valid === true) {\n        query.AIP[i].bapId = bap.idKey;\n      }\n    }\n  }\n\n  // Twetch does not follow BSocial protocol 100%\n  const bSocialReply = query.MAP[0]?.context === 'tx' && query.MAP[0]?.tx;\n  const twetchPost = query.MAP[0]?.app === 'twetch';\n  const twetchReply = twetchPost && query.MAP[0]?.reply && query.MAP[0]?.reply !== 'null';\n  if (twetchReply && !bSocialReply) {\n    query.MAP[0].context = 'tx';\n    query.MAP[0].tx = query.MAP[0].reply;\n  }\n\n  // check for binary / encrypted B data\n  if (query.B) {\n    for (let i = 0; i < query.B.length; i++) {\n      if (query.B[i].content.match(/^bitfs:\\/\\/[0-9a-z\\.]+$/)) {\n        // store the bitfs content in the database, but only text\n        if (BITFS_STORE && query.B[i]['content-type']?.match(/^text/)) {\n          try {\n            const url = query.B[i].content;\n            const bitfsContent = await getBitfsContent(url)\n              .catch((e) => { console.error(e); });\n            if (bitfsContent && bitfsContent.length <= BITFS_MAX_CONTENT_LENGTH) {\n              // no need to wait ...\n              await BSOCIAL_BITFS.upsert({\n                _id: url,\n              }, {\n                $set: {\n                  _id: url,\n                  content: bitfsContent,\n                  'content-type': query.B[i]['content-type'],\n                  length: bitfsContent.length,\n                  tx: query._id,\n                },\n              });\n              query.B[i].length = bitfsContent.length;\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      } else {\n        query.B[i].length = query.B[i].content.length;\n      }\n\n      try {\n        if (query.B[i]['content-type']?.match(/ecies$/)) {\n          // store the encrypted stuff as hex - binary does not survive storing to Mongo\n          // the bmap parser does not understand this yet, maybe it should be added there\n          query.B[i].content = Buffer.from(query.B[i].content, 'binary')\n            .toString('hex');\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    const twetchUrlRegex = new RegExp('https://twetch.app/t/([0-9a-zA-Z]+)', 'i');\n    const twetchRepost = twetchPost && query.B[0]?.content?.match(twetchUrlRegex);\n    if (twetchRepost && twetchRepost[1]) {\n      const twetchTx = twetchRepost[1];\n      query.B[0].content = query.B[0].content.replace(twetchUrlRegex, '');\n      query.MAP[0].type = 'repost';\n      query.MAP[0].context = 'tx';\n      query.MAP[0].tx = twetchTx;\n    }\n  }\n\n  const existing = await BSOCIAL.findOne({ _id: query._id });\n  if (existing) {\n    // update\n    const bSocialId = query._id;\n    delete query._id;\n    if (existing.timestamp) {\n      // do not update timestamp if already set, we'll use the original one from the mempool\n      delete query.timestamp;\n    }\n\n    await BSOCIAL.updateOne({\n      _id: bSocialId,\n    }, {\n      $set: query,\n    })\n      .catch((e) => {\n        console.error('Failed updating bSocial tx', bSocialId, e.reason || e.message);\n      });\n  } else {\n    // insert\n    await BSOCIAL.insert(query)\n      .catch((e) => {\n        console.error('Failed inserting bSocial tx ', query._id, e.reason || e.message);\n      });\n  }\n};\n\n/**\n * Parse the Bitcoin Social transaction and return a clean document\n * @param op\n */\nexport const parseBSocialTransaction = async function (op) {\n  try {\n    const bmap = new BMAP();\n\n    // add the BPP handler\n    const querySchema = [\n      { action: 'string' },\n      { currency: 'string' },\n      { address: 'string' },\n      { apiEndpoint: 'string' },\n    ];\n    const handler = bmapQuerySchemaHandler.bind(bmap, 'BPP', querySchema);\n    bmap.addProtocolHandler({\n      name: 'BPP',\n      address: 'BPP',\n      querySchema,\n      handler,\n    });\n\n    const bSocialOp = cleanDocumentKeys(await bmap.transformTx(op));\n    bSocialOp.txId = bSocialOp.tx.h;\n    bSocialOp._id = bSocialOp.txId;\n\n    delete bSocialOp.in;\n    delete bSocialOp.out;\n    delete bSocialOp.tx;\n    delete bSocialOp.lock;\n    delete bSocialOp.blk;\n\n    const keysToTransform = ['B', 'AIP', 'MAP', 'BPP'];\n    keysToTransform.forEach((key) => {\n      if (bSocialOp[key] && !Array.isArray(bSocialOp[key])) {\n        bSocialOp[key] = [bSocialOp[key]];\n      }\n    });\n\n    return bSocialOp;\n  } catch (e) {\n    if (DEBUG) console.error(e.message, JSON.stringify(op));\n    return false;\n  }\n};\n\nexport const isBSocialOp = function (op) {\n  if (op.MAP && op.MAP.length > 0) {\n    return !!op.MAP.find((map) => {\n      return map.cmd === 'SET'\n        && map.app\n        && BSOCIAL_VALID_ACTIONS.includes(map.type);\n    });\n  }\n\n  return false;\n};\n\nexport const processBlockEvents = async function (op, blockHeight, blockTime) {\n  try {\n    const txId = op.tx.h;\n    const block = blockHeight;\n    const timestamp = blockTime || Math.round((+new Date()) / 1000);\n\n    /* eslint-disable no-await-in-loop */\n    const bSocialOp = await parseBSocialTransaction(op);\n    if (isBSocialOp(bSocialOp)) {\n      if (VERBOSE) console.log('got bSocial transaction', txId, block || 'mempool', blockTime);\n\n      bSocialOp._id = txId;\n      bSocialOp.block = block;\n      bSocialOp.timestamp = timestamp;\n\n      /* eslint-disable no-await-in-loop */\n      await processBSocialTransaction(bSocialOp);\n    } else {\n      op.txId = txId;\n      op.block = block;\n      await addErrorTransaction(op);\n    }\n  } catch (e) {\n    if (!op) op = {\n      txId: Random.id(),\n    };\n    op.error = JSON.stringify(e, Object.getOwnPropertyNames(e));\n    await addErrorTransaction(op);\n  }\n};\n\nexport const getEventFromTx = async function (rawTx) {\n  return BPU.parse({\n    tx: { r: rawTx },\n    split: [\n      {\n        token: { op: 106 },\n        include: 'l',\n      },\n      {\n        token: { op: 0 },\n        include: 'l',\n      },\n      {\n        token: { s: '|' },\n      },\n    ],\n  });\n};\n\nexport const indexBSocialTransactions = async function (subscriptionId) {\n  const lastBlockIndexed = await getLastBlockIndex();\n\n  const client = new JungleBusClient('junglebus.gorillapool.io', {\n    useSSL: true,\n    onError(ctx) {\n      console.error(ctx);\n    },\n  });\n\n  const onPublish = async function (tx) {\n    const event = await getEventFromTx(tx.transaction);\n    await processBlockEvents(event, tx.block_height, tx.block_time);\n  };\n  const onStatus = async function (message) {\n    if (message.statusCode === ControlMessageStatusCode.BLOCK_DONE) {\n      await updateLastBlock(message.block);\n    } else if (message.statusCode === ControlMessageStatusCode.ERROR) {\n      console.error(message);\n    }\n  };\n  const onError = function (err) {\n    console.error(err);\n  };\n  const onMempool = async function (tx) {\n    const event = await getEventFromTx(tx.transaction);\n    await processBlockEvents(event, 0, 0);\n  };\n\n  return client.Subscribe(\n    subscriptionId,\n    lastBlockIndexed,\n    onPublish,\n    onStatus,\n    onError,\n    onMempool,\n  );\n};\n"],"mappings":"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"}